// expr.h
// XML Game Engine
// author: beefviper
// date: Sept 18, 2020

#pragma once

#include <random>

// disable warnings generated by exprtk
#pragma warning(push)
#pragma warning(disable : 26812)
#pragma warning(disable : 26451)
#pragma warning(disable : 26495)
#pragma warning(disable : 26498)

#include <exprtk.hpp>

#pragma warning( pop )


namespace xge {
	std::vector<float> tempParams;
	std::vector<std::string> tempSParams;

	std::random_device seed;
	std::mt19937 generator(seed());

	void clearAllTempParams(void)
	{
		tempParams.clear();
		tempSParams.clear();
	}

	template <typename T>
	T randomNumberRange(T min, T max)
	{
		std::uniform_real_distribution<T> distribution(min, max);
		T randNum = distribution(generator);
		return randNum;
	}

	template <typename T>
	struct randomNumber : public exprtk::ifunction<T>
	{
		randomNumber() : exprtk::ifunction<T>(1)
		{
		
		}

		T operator()(const T& randMax)
		{
			return randomNumberRange(0.0f, randMax);
		}
	};

	template <typename T>
	struct randomRange : public exprtk::ifunction<T>
	{
		randomRange() : exprtk::ifunction<T>(2)
		{
				
		}

		T operator()(const T& randMin, const T& randMax)
		{
			return randomNumberRange(randMin, randMax);
		}
	};

	template <typename T>
	struct shapeCircle : public exprtk::ifunction<T>
	{
		shapeCircle() : exprtk::ifunction<T>(1)
		{

		}

		T operator()(const T& cradius)
		{
			clearAllTempParams();
			tempParams.push_back(cradius);
			return 0;
		}
	};

	template <typename T>
	struct shapeRectangle : public exprtk::ifunction<T>
	{
		shapeRectangle() : exprtk::ifunction<T>(2)
		{

		}

		T operator()(const T& cwidth, const T& cheight)
		{
			clearAllTempParams();
			tempParams.push_back(cwidth);
			tempParams.push_back(cheight);
			return 0;
		}
	};

	template <typename T>
	struct text : public exprtk::igeneric_function<T>
	{
		typedef exprtk::igeneric_function<T> igenfunct_t;
		typedef typename igenfunct_t::generic_type generic_t;
		typedef typename igenfunct_t::parameter_list_t parameter_list_t;
		typedef typename generic_t::string_view string_t;
		typedef typename generic_t::scalar_view scalar_t;

		text() : exprtk::igeneric_function<T>("ST")
		{

		}

		inline T operator()(parameter_list_t parameters)
		{
			clearAllTempParams();
			tempSParams.push_back(exprtk::to_str(string_t(parameters[0])));
			tempParams.push_back(scalar_t(parameters[1])());
			return 0;
		}
	};
}
