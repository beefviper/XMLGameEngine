// xml.h
// XML Game Engine
// author: beefviper
// date: Sept 18, 2020

#pragma once

// disable warnings generated by tinyxml2 and xerces
#pragma warning(push)
#pragma warning(disable : 26812)
#pragma warning(disable : 26451)

#include <tinyxml2.h>
#include <xercesc/dom/DOM.hpp>
#include <xercesc/parsers/XercesDOMParser.hpp>
#include <xercesc/framework/LocalFileInputSource.hpp>
#include <xercesc/sax/HandlerBase.hpp>
#include <xercesc/sax/ErrorHandler.hpp>
#include <xercesc/sax/SAXParseException.hpp>
#include <xercesc/validators/common/Grammar.hpp>
#include <xercesc/util/PlatformUtils.hpp>
#include <xercesc/util/XMLString.hpp>
#include <xercesc/util/XMLChar.hpp>
#include <xercesc/util/XMLChTranscoder.hpp>

#pragma warning(pop)

#include <iostream>
#include <string>

namespace tx = tinyxml2;
namespace xc = xercesc;

namespace xge
{
	auto s2x = [](std::string input)
	{
		std::unique_ptr<const XMLCh*> output = std::make_unique<const XMLCh*>(xc::XMLString::transcode(input.c_str()));
		return *std::move(output);
	};
	auto x2s = [](const XMLCh* input)
	{
		return xc::XMLString::transcode(input);
	};
	auto getAttributeByName = [s2x, x2s](xc::DOMElement* element, std::string name)
	{
		return x2s(element->getAttribute(s2x(name)));
	};

	class ParserErrorHandler : public xc::ErrorHandler
	{
	private:
		void reportParseException(const xc::SAXParseException& ex);

	public:
		void warning(const xc::SAXParseException& ex);
		void error(const xc::SAXParseException& ex);
		void fatalError(const xc::SAXParseException& ex);
		void resetErrors();
	};

	void checkXMLResult(tx::XMLDocument& xml, tx::XMLError result);
	tx::XMLElement* getXMLRoot(tx::XMLElement* element);
	tx::XMLElement* getXMLElement(tx::XMLElement* element, std::string tag);
	tx::XMLElement* getXMLElementOptional(tx::XMLElement* element, std::string tag);
	std::string getXMLText(tx::XMLElement* element);
	std::string getXMLAttribute(tx::XMLElement* element, std::string attribute);
	std::string getXMLAttributeOptional(tx::XMLElement* element, std::string attribute);
	int getXMLAttributeInt(tx::XMLElement* element, std::string attribute);
	float getXMLAttributeFloat(tx::XMLElement* element, std::string attribute);
}